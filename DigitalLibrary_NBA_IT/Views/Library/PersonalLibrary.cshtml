@model IEnumerable<DigitalLibrary_NBA_IT.Models.UserLibrary>

@{
    ViewBag.Title = "My Library";
}

<h2 class="text-center text-primary mt-4">My Library</h2>

@if (TempData["Message"] != null)
{
    <div class="alert alert-success text-center">@TempData["Message"]</div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger text-center">@TempData["Error"]</div>
}

<!-- Search Bar with Button -->
<div class="input-group mb-4">
    <input type="text" id="searchInput" class="form-control" placeholder="Search for a book by title..." />
    <button class="btn btn-primary" onclick="filterBooks()">Search</button>
</div>

<div class="table-responsive mt-4">
    <table class="table table-striped table-hover shadow-sm rounded" id="booksTable">
        <thead class="thead-dark">
            <tr>
                <th>Image</th>
                <th>Title</th>
                <th>Purchase Date</th>
                <th>Status</th>
                <th>Expiry Date</th>
                <th>Actions</th>
                <th>Review</th>
                <th>Download</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in Model)
            {
            <tr>
                <td>
                    <img src="@book.Books.ImageUrl" alt="@book.Books.Title" class="img-thumbnail" style="width: 80px; height: auto;" />
                </td>
                <td class="book-title">@book.Books.Title</td>
                <td>@book.PurchaseDate.ToString("yyyy-MM-dd")</td>
                <td>
                    @if (book.IsBorrowed)
                    {
                        <span class="badge bg-warning text-dark">Borrowed</span>
                    }
                    else
                    {
                        <span class="badge bg-success">Purchased</span>
                    }
                </td>
                <td>
                    @if (book.IsBorrowed && book.ExpiryDate.HasValue)
                    {
                        @book.ExpiryDate.Value.ToString("yyyy-MM-dd")
                    }
                    else
                    {
                        <span>—</span>
                    }
                </td>
                <td>
                    @if (!book.IsBorrowed)
                    {
                        <form method="post" action="@Url.Action("RemoveBook", "Library")" style="display:inline;">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="bookId" value="@book.Book_ID" />
                            <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to remove this book?');">
                                Remove
                            </button>
                        </form>
                    }
                </td>
                <td>
                    <a href="@Url.Action("AddReview", "Library", new { id = book.Book_ID.Trim() })" class="btn btn-primary btn-sm">
                        Add Review
                    </a>
                </td>
                <td>
                    @if (!book.IsBorrowed)
                    {
                        <div class="dropdown">
                            <button class="btn btn-info btn-sm dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                Download
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                <li><a class="dropdown-item" href="@Url.Action("DownloadBook", "Library", new { bookId = book.Book_ID.Trim(), format = "mobi" })">MOBI</a></li>
                                <li><a class="dropdown-item" href="@Url.Action("DownloadBook", "Library", new { bookId = book.Book_ID.Trim(), format = "b2f" })">B2F</a></li>
                                <li><a class="dropdown-item" href="@Url.Action("DownloadBook", "Library", new { bookId = book.Book_ID.Trim(), format = "epub" })">EPUB</a></li>
                                <li><a class="dropdown-item" href="@Url.Action("DownloadBook", "Library", new { bookId = book.Book_ID.Trim(), format = "pdf" })">PDF</a></li>
                            </ul>
                        </div>
                    }
                </td>

            </tr>
            }
        </tbody>
    </table>
</div>

<style>
    h2 {
        font-family: 'Arial', sans-serif;
        font-weight: bold;
    }

    table {
        background-color: #ffffff;
        border-radius: 8px;
        overflow: hidden;
    }

    thead {
        background-color: #343a40;
        color: #ffffff;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f8f9fa;
    }

    .table-striped tbody tr:nth-of-type(even) {
        background-color: #e9ecef;
    }

    .btn {
        font-size: 0.9rem;
        padding: 5px 10px;
    }

    .badge {
        font-size: 0.9rem;
        padding: 5px 10px;
    }

    .shadow-sm {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .rounded {
        border-radius: 0.25rem;
    }

    .img-thumbnail {
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
</style>

<script>
    function filterBooks() {
        const input = document.getElementById('searchInput');
        const filter = input.value.toLowerCase();
        const table = document.getElementById('booksTable');
        const rows = table.getElementsByTagName('tr');

        for (let i = 1; i < rows.length; i++) { // מתחיל משורה 1 כדי לדלג על כותרת הטבלה
            const titleCell = rows[i].getElementsByClassName('book-title')[0];
            if (titleCell) {
                const titleText = titleCell.textContent || titleCell.innerText;
                if (titleText.toLowerCase().indexOf(filter) > -1) {
                    rows[i].style.display = '';
                } else {
                    rows[i].style.display = 'none';
                }
            }
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        // הפעלת הפונקציונליות של Popover של Bootstrap
        var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
        var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl, {
                html: true
            });
        });
    });
</script>
